version: '3'
services:
  flask:
    build:
      context: app
      dockerfile: Dockerfile
    container_name: flask
    image: digitalocean.com/flask-python:3.6
    restart: unless-stopped
    environment:
      APP_ENV: ${APP_ENV}
      APP_DEBUG: ${APP_DEBUG}
      APP_PORT: 5000
      MONGODB_DATABASE: ${DB_NAME}
      MONGODB_USERNAME: ${DB_USERNAME}
      MONGODB_PASSWORD: ${DB_PASSWORD}
      MONGODB_HOSTNAME: mongodb
    volumes:
      - ./app:/app
    ports:
    - 5000:5000
    depends_on:
      - mongodb
    networks:
      - frontend
      - backend
  mongodb:
    image: mongo
    container_name: mongodb
    restart: unless-stopped
    command: mongod --auth
    environment:
      MONGO_INITDB_DATABASE: ${DB_NAME}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_NON_ROOT_USERNAME: ${DB_USERNAME}
      MONGO_NON_ROOT_PASSWORD: ${DB_PASSWORD}
      MONGO_NON_ROOT_ROLE: readWrite
      MONDODB_LOG_DIR: /dev/null
    volumes:
      - ./docker/mongo/00_setup_user.sh:/docker-entrypoint-initdb.d/00_setup_user.sh:ro
      - ./docker/mongo/init.js:/docker-entrypoint-initdb.d/init.js:ro
      - mongodbdata:/data/db
    networks:
      - backend
  mongo-express:
    image: mongo-express
    restart: unless-stopped
    ports:
      - 8081:8081
    networks:
      - backend
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_SERVER: mongodb
volumes:
  mongodbdata:
    driver: local
networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge